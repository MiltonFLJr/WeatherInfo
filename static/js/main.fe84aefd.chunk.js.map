{"version":3,"sources":["App.js","Components/TableContent.js","serviceWorker.js","index.js"],"names":["WeatherApp","React","Component","props","state","icon","country","city","weather","description","temperature","mintemperature","maxtemperature","pressure","humidity","document","getElementById","addEventListener","event","keyCode","preventDefault","click","innerHTML","that","this","urlrequest","value","$","ajax","url","method","dataType","success","dados","i","icondata","datacountry","JSON","parse","stringify","sys","dataname","name","datatemperature","main","temp","temperaturecelsius","Math","round","parseFloat","datatemperaturemin","temp_min","mintemperaturecelsius","datatemperaturemax","temp_max","maxtemperaturecelsius","datapressure","datahumidity","setState","error","className","id","required","type","placeholder","onClick","weatherInfo","src","ReactDOM","render","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.fe84aefd.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport $ from 'jquery';\nimport TableContent from './Components/TableContent.js';\n\nclass WeatherApp extends React.Component{\n\n \t/* All the values showed in the interface are passed\n \tto the components trough state and update after the\n \tuser inform a city.*/\n\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\ticon:'',\n\t\t\tcountry:'',\n\t\t\tcity:'',\n\t\t\tweather:'',\n\t\t\tdescription:'',\n\t\t\ttemperature:'',\n\t\t\tmintemperature:'',\n\t\t\tmaxtemperature:'',\n\t\t\tpressure:'',\n\t\t\thumidity:''\n\t\t};\n\t}\n\ncomponentDidMount() {\n\nvar inputcity = document.getElementById('cityus');\n\ninputcity.addEventListener(\"keydown\",function(event){\n\nif(event.keyCode === 13){\t\nevent.preventDefault();\ndocument.getElementById('subbutton').click();\n}\n\n}\n\n);\n\t\n\t}\n\t\n\tweatherInfo(){\n\n\t\t/*\n\t\tThis function was created to get the values from the API \n\t\t\"Openweathermap\" and show the data after the user inform\n\t\tthe city he is living in.\n\t\t*/\n\t\tdocument.getElementById('idwarning').innerHTML = \"\";\n\t\tvar that = this; \n\t\tvar city = document.getElementById('cityus').value;\n\t\tvar urlrequest = 'http://api.openweathermap.org/data/2.5/weather?q='+city+'&appid=4e4f4687d2b93f1f582bfb7545187965'; // URL that is requested to get the data \n\t\t$.ajax({\n\t\turl: urlrequest,\n\t\tmethod:'get', \n\t\tdataType:'json',\n\t\tsuccess: function (dados){\n\n\t\tvar i,weather,description,icondata;\n\t\tvar datacountry = JSON.parse(JSON.stringify(dados.sys.country)); \n\t\tvar dataname = JSON.parse(JSON.stringify(dados.name));\n\t\tvar datatemperature = JSON.stringify(dados.main.temp);\n\t\tvar temperaturecelsius = (Math.round(parseFloat(datatemperature) - 273.15)) + \" °C\";\n\t\tvar datatemperaturemin = JSON.stringify(dados.main.temp_min);\n\t\tvar mintemperaturecelsius = (Math.round(parseFloat(datatemperaturemin) - 273.15)) + \" °C\"; \n\t\tvar datatemperaturemax = JSON.stringify(dados.main.temp_max);\n\t\tvar maxtemperaturecelsius = (Math.round(parseFloat(datatemperaturemax) - 273.15)) + \" °C\"; \n\t\tvar datapressure = JSON.stringify(dados.main.pressure) + \" mbar\";\n\t\tvar datahumidity = JSON.stringify(dados.main.humidity) + \"%\"; \n    \tfor(i in dados.weather){\n    \tweather = JSON.parse(JSON.stringify(dados.weather[i].main));\n    \tdescription = JSON.parse(JSON.stringify(dados.weather[i].description));\n    \ticondata = \"http://openweathermap.org/img/wn/\" +\n    \t(JSON.parse(JSON.stringify(dados.weather[i].icon))) +\n\t\t\"@2x.png\";\n    \t}\n\t\n\t\t\tthat.setState({icon: icondata,\n\t\t\tcountry: datacountry,\n\t\t\tcity: dataname,\n\t\t\tweather: weather,\n\t\t\tdescription: description,\n\t\t\ttemperature: temperaturecelsius,\n\t\t\tmintemperature: mintemperaturecelsius,\n\t\t\tmaxtemperature: maxtemperaturecelsius,\n\t\t\tpressure: datapressure,\n\t\t\thumidity: datahumidity});\t\n\t\t\n\n\t\t},\n\n\t\terror: function(dados){\n\t\t\tdocument.getElementById('idwarning').innerHTML = \"There is something wrong or the server is busy, try again.\";\n\t\t}\n\n});\n\n\n}\n\nrender(){\n\n\treturn(\n\n\t\t<div className=\"positionRelative\">\n\n\t\t<div className=\"containerform\" id=\"container\">\n\n\t\t<h1 className=\"AbrilFont title\">WEATHERINFO</h1> \n\t\t\n\t\t<form>\n\t\t\t<label className=\"labelcity\">Enter your city:</label>\n\t\t\t<input required id=\"cityus\" type=\"text\" name=\"city\" className=\"inputtext\" placeholder=\"City\"/>\n\t\t\t<button  id=\"subbutton\" type=\"button\" name=\"Enviar\" className=\"inputsubmit\" onClick={ () => {this.weatherInfo()}} >Enviar</button>\n\t\t</form>\n\n\t\t<div className=\"warning\" id=\"idwarning\">\n\t\t\t\n\t\t</div>\n\t\t\t\n \t\t<table className=\"customfontsize\" id=\"exibirDados\">\n \t\t\t<tbody>\n \t\t\t<tr>\n \t\t\t\t<td>\n \t\t\t\t<img src={this.state.icon} />\n \t\t\t\t</td>\n \t\t\t</tr>\n \t\t\t<tr>\n \t\t\t\t<td>\n \t\t\t\t\t<div className=\"bold\">Country:</div> {this.state.country}\n \t\t\t\t</td>\n \t\t\t</tr>\n \t\t\t<tr>\n \t\t\t\t<td>\n \t\t\t\t\t<div className=\"bold\">City:</div> {this.state.city}\n \t\t\t\t</td>\n \t\t\t</tr>\n \t\t\t<tr>\n \t\t\t\t<td>\n \t\t\t\t\t<div className=\"bold\">Weather:</div> {this.state.weather}\n \t\t\t\t</td>\n \t\t\t</tr>\n \t\t\t<tr>\n \t\t\t\t<td>\n \t\t\t\t\t<div className=\"bold\">Description:</div> {this.state.description}\n \t\t\t\t</td>\n \t\t\t</tr>\n \t\t\t<tr>\n \t\t\t\t<td>\n \t\t\t\t\t<div className=\"bold\">Temperature:</div> {this.state.temperature}\n \t\t\t\t</td>\n \t\t\t</tr>\n \t\t\t<tr>\n \t\t\t\t<td>\n \t\t\t\t\t<div className=\"bold\">Minimum temperature:</div> {this.state.mintemperature}\n \t\t\t\t</td>\n \t\t\t</tr>\n \t\t\t<tr>\n \t\t\t\t<td>\n \t\t\t\t\t<div className=\"bold\">Maximum temperature:</div> {this.state.maxtemperature}\n \t\t\t\t</td>\n \t\t\t</tr>\n \t\t\t<tr>\n \t\t\t\t<td>\n \t\t\t\t\t<div className=\"bold\">Pressure:</div> {this.state.pressure}\n \t\t\t\t</td>\n \t\t\t</tr>\n \t\t\t \t\t\t<tr>\n \t\t\t\t<td>\n \t\t\t\t\t<div className=\"bold\">Humidity:</div> {this.state.humidity}\n \t\t\t\t</td>\n \t\t\t</tr>\n \t\t\t</tbody>\n \t\t</table>\t\n\n\t\t</div>\n\n\t\t</div>\n\n);\n\n}\n\n\n\n}\n\nReactDOM.render(<WeatherApp />,document.getElementById('root'));\nexport default WeatherApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport $ from 'jquery';\n\nclass TableContent extends React.Component{\n\n\tweatherInfo(){\n\t\t/*\n\t\t$.ajax({\n\t\turl:'https://api.openweathermap.org/data/2.5/weather?id=2172797&appid=4e4f4687d2b93f1f582bfb7545187965',\n\t\tmethod:'get',\n\t\tdataType:'json'\n\t\t}).done(function (dados){\n\n\t\t\tvar i;\n\t\t\tfor(i=0;i<dados.weather.length;i++){\n\t\t\t\tdocument.write(JSON.stringify(dados.weather[i]));\n\t\t\t}\n\n\t\t});\n\t*/\n\t}\n\n\trender(){\n\n\treturn(\n\t\tconsole.log(\"TESTANDO!\")\n\t);\n\n\t}\n\t\n\n\n}\n\nexport default TableContent;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}